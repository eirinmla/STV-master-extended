        forcing_actions_agent1 = [] # agent with index 0 in actions is the same agent that has agent-id 0
        forcing_actions_agent2 = [] # agent with index 1 in actions is the same agent that has agent-id 1
        dict_actions = self._model.get_full_transitions()
        print("dict_actions: ", dict_actions)
        state_id = 0
        while state_id < len(self._states):
            temp_list = []
            not_forcing = []
            for key, value in dict_actions.items():
                if key[0] == state_id:
                    temp_list.append(value)
            if len(temp_list) == 1:
                continue
            else:
                count = 0
                print(len(temp_list))
                #while count < len(temp_list):
                #    print(temp_list[count])
                #    count += 1
            print("templist 1", temp_list[0], "hei", temp_list[1])
            for item in temp_list[0]:
                for it in temp_list[1]:
                    if item[0] == it[0]:
                        not_forcing.append(item[0])
            
            for key, value in dict_actions.items():
                if key[0] == state_id:
                    for element in not_forcing:
                        print(element, value)
                        for el in value:
                            if element in el:
                                dict_actions[key].remove(el)
            state_id += 1

            print("temp_list", temp_list)
            print(not_forcing)
        print(dict_actions)




        from_states =  []
        for key in dict_actions.keys():
            from_states.append(key[0])
        for state in set(from_states): # hele denne virker kun dersom det bare er en action til hver from_state, to_state tuppel
            if from_states.count(state) == 1:
                for key, value in dict_actions.items():
                    if state == key[0]:
                        forcing_actions_agent1.append([key, value])
                        forcing_actions_agent2.append([key, value])
            elif from_states.count(state) == 2:
                action_pairs = []
                for key, value in dict_actions.items():
                    if key[0] == state:
                        action_pairs.append(value)
                action_agent1 = []
                action_agent2 = []
                #print(action_pairs)
                for action in action_pairs:
                    count = 0
                    while count < len(action):
                        action_agent1.append(action[count][0])
                        action_agent2.append(action[count][1])
                        #print(action_agent1, action_agent2)
                        if len(set(action_agent1)) == 1 and len(set(action_agent2)) == 2:
                            for key, value in dict_actions.items():
                                if state == key[0]:
                                    forcing_actions_agent2.append([key, value])
                        elif len(set(action_agent1)) == 2 and len(set(action_agent2)) == 1:
                            for key, value in dict_actions.items():
                                if state == key[0]:
                                    forcing_actions_agent1.append([key, value])
                        count += 1
                #print("action_agent1:", action_agent1, "\naction_agent2:", action_agent2)
            else: 
                pass
                
        print("forcing actions agent1: ", forcing_actions_agent1, "\nforcing actions agent2: ", forcing_actions_agent2)
        return forcing_actions_agent1, forcing_actions_agent2



FRA FORCING ACTIONS LINJ 1230
                                    if non_forcing_actions == set():
                                if count == 0:
                                    forcing_actions_agent1.append([key, val])
                                elif count == 1:
                                    forcing_actions_agent2.append([key, val])
                            else: 

Linje 1171 global model
        forcing_actions_dict = {}
        for element in forcing_actions:
            if element[0] not in forcing_actions_dict:
                forcing_actions_dict[element[0]] = [element[1]]
            else: 
                forcing_actions_dict[element[0]].append(element[1])



 def get_forcing_actions1(self):
        dict_actions = self._model.get_full_transitions()
        print("DICT ACTIONS", dict_actions)
        same_props = self.get_equal_states()
        print("SAME PROPS", same_props)
        forcing_actions_agent1 = []
        forcing_actions_agent2 = []
        count = 0
        while count < self._agents_count:
            for state in self._states:
                non_forcing_actions = set()
                temp_list = []
                temp_set = set()
                for key, value in dict_actions.items():    
                    #print(key, value)
                    if state.id == key[0]:    
                        for val in value:
                            #print(key, val)
                            temp_set.add(val[count])
                            print("TEMP SET", temp_set)
                        temp_list.append(temp_set)
                print(temp_list)
                if len(temp_list) > 1:
                    non_forcing_actions = set.intersection(*temp_list)
                for key, value in dict_actions.items():
                    if state.id == key[0]:
                        for val in value:
                            if non_forcing_actions == set():
                                if count == 0:
                                    forcing_actions_agent1.append([key, val])
                                elif count == 1:
                                    forcing_actions_agent2.append([key, val])
                            else: 
                                if val[count] not in non_forcing_actions:
                                    if count == 0:
                                        forcing_actions_agent1.append([key, val])
                                    elif count == 1:
                                        forcing_actions_agent2.append([key, val])
            count += 1
        print("FORCING", forcing_actions_agent1, forcing_actions_agent2)
        return forcing_actions_agent1, forcing_actions_agent2


    def ucl_next(self, agent_ids: List[int], current_states: Set[int]) -> Set[int]:
        is_winning_state = self.marked_winning_states(current_states)
        result_states = set()
        pre_image = self.prepare_pre_image(current_states)
        actions = self.get_agents_actions(agent_ids)
        self.strategy = [None for _ in range(self.number_of_states)]
        print(is_winning_state)
        print(actions)
        for state_id in pre_image:
            if is_winning_state[state_id]:        #     Kommentert ut på grunn av at det kun er et state man skal videre og fordi det ikke er mulig å ikke gjøre et valg
                pass
                #print(is_winning_state[state_id])
                #result_states.add(state_id)
                #continue

            for action in itertools.product(*actions):
                #print(action)
                if action == "*":
                    continue

                if self.is_reachable_by_agents(agent_ids, state_id, list(action), is_winning_state):
                    self.strategy[state_id] = list(action)
                    result_states.add(state_id)
                    is_winning_state[state_id] = True
                    break  
        print(self.strategy)
        return result_states

    
    def remaining_transitions(self, removed_transitions):
        all_transitions = self._model.get_full_transitions()
        remaining_transitions = []
        for key, value in all_transitions.items():
            for val in value:
                if [key, val] not in removed_transitions:
                    remaining_transitions.append([key, val])
        
        return remaining_transitions
